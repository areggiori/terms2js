#! /usr/bin/env node

"use strict";

/*
 * Extracts all terms from input vocabulary as JSON and Javascript
 */

/*
 * Copyright 2013
 * Alberto Attilio Reggiori <alberto@derrickmedia.com>
 * https://github.com/dplatform/terms2js
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

var terms2js = require ('../lib/terms2js'),
    optimist = require ('optimist'),
    fs = require ('fs'),
    path = require ('path'),
    zlib = require ('zlib'),
    gzip = zlib.createGzip(),
    UglifyJS = require ('uglify-js');

var argv = optimist
    .usage("\n$0 voc1.xml [voc2.xml ...] [options]")
    .describe("output-dir", "Specify an output directory where to generate the JSON and Javascript vocabularies.")
    .describe("default-lang", "Default language for output vocabularies if cannot be guessed from input sources (e.g. xml:lang). Default to 'en'.")
    .string("output-dir")
    .string("default-lang")
    .wrap(80)
    .argv;

if (argv.help) {
    console.__unset;
    require('optimist').showHelp (console.log);
    process.exit(0);
}

if (!argv["output-dir"]) {
  console.log ("Output directory option must be specified and not empty.");
  require('optimist').showHelp (console.log);
  process.exit (1);
}

if (!(fs.existsSync(argv["output-dir"]))) {
  fs.mkdirSync (argv["output-dir"]);
}

var vocabulary_files = argv._.slice();

if (vocabulary_files.length == 0) {
  console.log ("Missing input vocabulary files.");
  require('optimist').showHelp (console.log);
  process.exit (1);
}

var output_dir = argv["output-dir"];
var default_lang = 'en';

if (argv["default-lang"]) {
  default_lang = argv["default-lang"];
}

var license = fs.readFileSync (path.resolve(__dirname, 'license.txt'));
var termsapi = fs.readFileSync (path.resolve(__dirname, '../lib/termsapi.js'));

var files_tocompress = [];

for (var i=0 ; i < vocabulary_files.length ; i++) {
  var vocabulary_file = vocabulary_files[i];

  console.log ("Processing vocabulary file "+vocabulary_file);

  var parser = terms2js.createParser ({default_lang: default_lang});

  var data = fs.readFileSync (vocabulary_file, 'utf8');

  parser.parseString (data);

  var langs = parser.getAvailableLanguages ();

  for (var j=0; j < langs.length ; j++) {
    var lang = langs[j];

    var voc = parser.getVocabulary (lang);

    if (!voc) {
      continue;
    }

    var terms = voc.stringify ();

    //console.log (voc.stringify (null, '\t'));

    var langdir = path.resolve(output_dir, lang);

    if (!fs.existsSync (langdir))
      fs.mkdirSync (langdir);

    var voc_file = vocabulary_file.replace (".xml", "").split (path.sep).pop ();

    var out_file = path.resolve (langdir, voc_file + ".json");
    var data = terms;
    fs.writeFileSync (out_file, data);
    console.log("\tGenerated "+out_file);

    files_tocompress.push (out_file);

	   //"\nif (!exports[\""+lang+"\"]) { exports[\""+lang+"\"] = {}; }\n" +
	   //"\nexports[\""+lang+"\"][\""+voc_file+"\"] = new Vocabulary (\""+lang+"\", " + terms + ")\n" +
    out_file = path.resolve (langdir, voc_file + ".js");

    var header = "//allow executing by nodejs in the server or by javascript in the browser\n" +
 		 "if (typeof exports === 'undefined') {\n"+
                 "  if (!this[\"terms2js\"])\n" +
                 "    this[\"terms2js\"] = {};\n" +
                 "  if (!this[\"terms2js\"][\""+lang+"\"])\n" +
                 "    this[\"terms2js\"][\""+lang+"\"] = {};\n" +
                 "  this[\"terms2js\"][\""+lang+"\"][\""+voc_file+"\"] = {};\n" +
                 "  exports = this[\"terms2js\"][\""+lang+"\"][\""+voc_file+"\"];\n" +
                 "};\n" +
                 "(function (exports){\n";
    var footer = "})(exports);";

    data = license +
	   header +
	   "//embed object json\n" +
	   "//no accessible directly, you must use ../termsapi.js\n" +
	   termsapi +
	   "\nexports.Vocabulary = new Vocabulary (\""+lang+"\", " + terms + ")\n" +
	   footer;
    fs.writeFileSync (out_file, data);
    console.log("\tGenerated "+out_file);

    out_file = path.resolve (langdir, voc_file + ".min.js");
    data = "/* From: https://github.com/dplatform/terms2js */\n" + UglifyJS.minify (data, {fromString:true}).code;
    fs.writeFileSync (out_file, data);
    console.log("\tUglifyed to "+out_file);

    files_tocompress.push (out_file);
  }
}

console.log("Compressing generated files");

(function compress () {
  var file = files_tocompress.pop ();
  if (file) {
    zlib.gzip (data, function (err, buffer) {
      if (!err) {
        fs.writeFileSync (file + ".gz", buffer);

        console.log("\tCompressed "+file+ ".gz");

        compress ();
      }
    });
  } else {
    console.log("All done, results are in directory '"+argv["output-dir"]+"'");
  }
})();
